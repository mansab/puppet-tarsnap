#!/bin/sh
# Bash script for 'puppet-tarsnap' module.
# AUTHOR Mansab Uppal
# Official site: http://mansab.upp.al
# Official git repository: https://github.com/mansab/puppet-tarsnap
# License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
# See README.md for more information.
#
# Variables holding data from Puppet hiera configuration and some paths on filesystem.
puppet_archive_name="<%= @archive_name %>"
puppet_machine_name="<%= @use_machine_name %>"
log_dir="/var/log/tarsnap"
key_file="/etc/tarsnap/tarsnap-write-key"
cache_dir="/var/lib/tarsnap/cache"
#
# Function to send error notifications.
# Using MailGun Curl API to send notification emails.
error_notification () {
  curl -s --user 'api:key-0515ee5391526f9f771a6d90b36addc5' \
    https://api.mailgun.net/v2/sandbox2b79a7e03c9a4772a6310579e57b53d2.mailgun.org/messages \
    -F from='<%= @use_machine_name %> <no-reply@<%= @use_machine_name %>>' \
    -F to='<%= @send_alerts_to %>'\
    -F subject='ERROR - Tarsnap upload failed.' \
    -F text="Hi,

There was an error with Tarsnap upload.

Effected instance:

--------

Machine: <%= @use_machine_name %>

Archive: <%= @archive_name %>-$1

Here are the runtime logs ("$log_dir"/"$2"):

---
$(cat "$log_dir"/"$2")
---

You can also check other log files present at: $log_dir

---END---

Tarsnap Backup-Tool"
}
#
# Function to check the status of tarsnap upload.
check_status () {
  if [ "$?" = "0" ]; then
    echo "Tarsnap upload completed successfuly for $1" >> "$log_dir"/"$log_file"
<% if @rm_after_upload == 'yes-remove-I-know-what-I-am-doing'-%>
      if [ -d $1 ]; then
        echo "Emptying $1 after uploading to tarsnap" >> "$log_dir"/"$log_file"
        rm -rf $1/* 2>> "$log_dir"/"$log_file"
          if [ "$?" = "0" ]; then
            echo "$1 is empty now" >> "$log_dir"/"$log_file"
          else
            echo "Contents of $1 can't be removed, see errors above." >> "$log_dir"/"$log_file"
          fi
       elif [ -f $1 ]; then
         echo "Removing $1 after uploading to tarsnap" >> "$log_dir"/"$log_file"
         rm -rf $1 2>> "$log_dir"/"$log_file"
           if [ "$?" = "0" ]; then
             echo "$1 removed" >> "$log_dir"/"$log_file"
           else
             echo "$1 can't be removed, see errors above." >> "$log_dir"/"$log_file"
           fi
       else 
         echo "ERROR: $1 is either not present or not a valid file/directory. Can't remove" >> "$log_dir"/"$log_file"
       fi
<% end -%>
  else
    echo "ERROR - Tarsnap upload failed for $1"
    error_notification $1 $2
  fi
}
#
# Function to create archives and upload them to Tarsnap servers.
tarsnap_upload () {
  backup_day=$(date +%a)
  backup_date=$(date +%d)
  backup_month=$(date +%b)
  backup_year=$(date +%Y)
  backup_time=$(date +%H:%M)
  backup_prefix="$puppet_machine_name-$puppet_archive_name"
  tarsnap_archive_name=$backup_prefix-$backup_day-$backup_date-$backup_month-$backup_year-$backup_time
  #
  #Fixes tarsnap filesystem in case of problems.
  #Needs a read-write or a delete key.
  #Execute the following command manually, if you see something like this in run time logs: "tarsnap: Sequence number mismatch: Run --fsck" 
  #/usr/local/bin/tarsnap --fsck --cachedir $cache_dir --keyfile $key_file
  #
  #Creates a new archive on tarsnap with new contents in directory <% @directories.each do |dir| %>
  #Tarsnap archive call for "<%= @archive_name %>-<%= dir %>"
  log_file=$(echo <%= dir %> | rev | cut -d '/' -f 1 | rev).run.log
  /usr/local/bin/tarsnap -c --cachedir $cache_dir --keyfile $key_file -f "$tarsnap_archive_name"-<%= dir %> <%= dir %> 2> "$log_dir"/"$log_file"
  check_status <%= dir %> $log_file
  <% end %> <% @files.each do |file| %>
  #Tarsnap archive call for "<%= @archive_name %>-<%= file %>"
  log_file=$(echo <%= file %> | rev | cut -d '/' -f 1 | rev).run.log
  /usr/local/bin/tarsnap -c --cachedir $cache_dir --keyfile $key_file -f "$tarsnap_archive_name"-<%= file %> <%= file %> 2> "$log_dir"/"$log_file"
  check_status <%= file %> $log_file
  <% end %>}
#
# Initiates the tarsnap upload
tarsnap_upload
